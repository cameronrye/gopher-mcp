name: Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags like v1.0.0, v1.2.3, etc.

env:
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify release branch
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$BRANCH" != "main" ]]; then
            echo "❌ Releases must be created from the main branch"
            echo "Current branch: $BRANCH"
            exit 1
          fi
          echo "✅ Releasing from main branch"

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "✅ Stable release: $VERSION"
          else
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "⚠️ Pre-release: $VERSION"
          fi

      - name: Validate version consistency
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')

          if [[ "$VERSION" != "$PYPROJECT_VERSION" ]]; then
            echo "❌ Version mismatch!"
            echo "Tag version: $VERSION"
            echo "pyproject.toml version: $PYPROJECT_VERSION"
            echo "Please update pyproject.toml version to match the tag"
            exit 1
          fi
          echo "✅ Version consistency validated"

      - name: Validate changelog
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if ! grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            echo "❌ Changelog missing entry for version $VERSION"
            echo "Please add a changelog entry for this version"
            exit 1
          fi
          echo "✅ Changelog entry found for version $VERSION"

  test-and-build:
    name: Test and build
    needs: validate-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run full test suite
        run: uv run pytest --cov-report=xml --cov-report=term

      - name: Run security checks
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json
          uv run safety check --save-json safety-report.json

      - name: Run linting and type checks
        run: |
          uv run ruff check .
          uv run ruff format --check .
          uv run mypy src

      - name: Build documentation
        run: uv run mkdocs build --strict

      - name: Build distribution packages
        run: uv build

      - name: Check distribution packages
        run: uv run python -m twine check dist/*

      - name: Test package installation
        run: |
          # Create a temporary virtual environment to test installation
          python -m venv test_env
          source test_env/bin/activate || test_env\Scripts\activate.bat

          # Install the built package
          pip install dist/*.whl

          # Test basic import
          python -c "import gopher_mcp; print('✅ Package imports successfully')"

          # Test CLI command
          gopher-mcp --help > /dev/null && echo "✅ CLI command works"

          # Cleanup
          deactivate
          rm -rf test_env

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: dist/
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    needs: [validate-release, test-and-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}

          # Extract changelog section for this version
          if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            # Extract content between this version and the next version header
            NOTES=$(awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md | sed '/^$/d' | head -n -1)

            if [[ -z "$NOTES" ]]; then
              NOTES="Release version ${VERSION}"
            fi
          else
            NOTES="Release version ${VERSION}. No changelog entry found for this version."
          fi

          # Create release notes file
          echo "$NOTES" > release_notes.txt
          echo "" >> release_notes.txt
          echo "---" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "**Release Information:**" >> release_notes.txt
          echo "- Version: ${VERSION}" >> release_notes.txt
          echo "- Release Date: $(date -u +"%Y-%m-%d")" >> release_notes.txt
          echo "- Commit: ${GITHUB_SHA:0:7}" >> release_notes.txt
          echo "- Workflow: [${GITHUB_RUN_ID}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "**Installation:**" >> release_notes.txt
          echo "\`\`\`bash" >> release_notes.txt
          echo "pip install gopher-mcp==${VERSION}" >> release_notes.txt
          echo "\`\`\`" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "**Verification:**" >> release_notes.txt
          echo "All packages are signed and can be verified using [Sigstore](https://www.sigstore.dev/)." >> release_notes.txt

          echo "Generated release notes for version $VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: release_notes.txt
          files: dist/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [validate-release, test-and-build, create-github-release]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/gopher-mcp
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
      attestations: write # For artifact attestation

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist/*"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          attestations: true
