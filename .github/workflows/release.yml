name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

env:
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

  test-and-build:
    name: Test and build
    needs: validate-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "Updated version to $VERSION"

      - name: Run full test suite
        run: uv run pytest --cov-report=xml --cov-report=term

      - name: Run security checks
        run: |
          uv run bandit -r src/ -f json -o bandit-report.json
          uv run safety check --save-json safety-report.json

      - name: Run linting and type checks
        run: |
          uv run ruff check .
          uv run ruff format --check .
          uv run mypy src

      - name: Build documentation
        run: uv run mkdocs build --strict

      - name: Build distribution packages
        run: uv build

      - name: Check distribution packages
        run: uv run python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: dist/
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    needs: [validate-release, test-and-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          
          # Extract changelog section for this version
          if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            NOTES=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
          else
            NOTES="Release version ${VERSION}"
          fi
          
          # Save to file for multiline output
          echo "$NOTES" > release_notes.txt
          echo "Generated release notes for version $VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: release_notes.txt
          files: dist/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [validate-release, test-and-build, create-github-release]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/gopher-mcp
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
